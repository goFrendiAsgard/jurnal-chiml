var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const fs_1 = require("fs");
const path_1 = require("path");
const file_system_1 = require("./file-system");
var config;
(function (config) {
    /**
     * Try to locate a file in the root path of the project.
     *
     * @param {string} file
     * @param {string} defaultPath
     * @returns {string}
     */
    function getConfigFilePath(file, defaultLocation) {
        if (path_1.isAbsolute(file)) {
            return file;
        }
        const path = path_1.join(file_system_1.fileSystem.getRootPath(), file);
        if (fs_1.existsSync(path)) {
            return path;
        }
        return path_1.join(defaultLocation, file);
    }
    config.getConfigFilePath = getConfigFilePath;
    /**
     * @deprecated use `@speedy/json-extends` instead.
     * Retrieve a JSON file. Supports `extends` with one or many existing JSON files.
     *
     * @template T
     * @param {string} filePath
     * @returns {Promise<T>}
     */
    function readConfigFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            let configData = yield file_system_1.fileSystem.readJsonFileAsync(filePath);
            if (_.isEmpty(configData.extends)) {
                return configData;
            }
            const configExtends = _.castArray(configData.extends);
            for (const path of configExtends) {
                configData = _.merge({}, yield readConfigFile(path), configData);
            }
            return configData;
        });
    }
    config.readConfigFile = readConfigFile;
})(config = exports.config || (exports.config = {}));
