Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const lodash_1 = require("lodash");
const padTimeUnit = (unit) => lodash_1.padStart(unit.toString(), 2, "0");
class Logger {
    constructor(scope) {
        this.scope = scope;
    }
    info(message) {
        console.info(chalk_1.default.white(this.formatMessage(message)));
    }
    /**
     * When `process.env.DEBUG` is not true debug message won't be printed.
     *
     * @param {string} method
     * @param {string} message
     * @returns
     *
     * @memberOf Logger
     */
    debug(method, message) {
        if (!process.env.DEBUG) {
            return;
        }
        console.log(chalk_1.default.green(this.formatMessage(message, method)));
    }
    warn(message) {
        console.warn(chalk_1.default.yellow(this.formatMessage(message)));
    }
    error(message, error) {
        console.error(chalk_1.default.red(this.formatMessage(this.formatErrorMessage(message, error))));
    }
    formatMessage(message, method) {
        const date = new Date();
        const time = chalk_1.default.gray(`${padTimeUnit(date.getHours())}:${padTimeUnit(date.getMinutes())}:${padTimeUnit(date.getSeconds())}`);
        return `${chalk_1.default.white(`[${time}]`)} ${chalk_1.default.cyan(`${this.scope}:`)}${method ? ` ${method}` : ""} ${message}`;
    }
    formatErrorMessage(message, error) {
        if (error) {
            const errorMsg = error.message ? error.message : JSON.stringify(error);
            return `Error: ${message ? `${message}, ${errorMsg}` : errorMsg}`;
        }
        return `Error: ${message}`;
    }
}
exports.Logger = Logger;
